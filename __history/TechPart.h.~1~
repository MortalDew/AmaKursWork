//---------------------------------------------------------------------------

#ifndef TechPartH
#define TechPartH
//---------------------------------------------------------------------------
#include <vcl.h>
#include <ctime> // для time()
#include <cstdlib> // для rand() и srand()
#include "PlayForm.h"

enum CardSuit
{
	SUIT_TREFU,
	SUIT_BYBNU,
	SUIT_CHERVU,
	SUIT_PIKI,
	MAX_SUITS
};

enum CardRank
{
	RANK_6,
	RANK_7,
	RANK_8,
	RANK_9,
	RANK_10,
	RANK_VALET,
	RANK_DAMA,
	RANK_KOROL,
	RANK_TYZ,
	MAX_RANKS
};

struct Card
{
	CardRank rank;
	CardSuit suit;
};

String GetCardName(const Card &card)
{

	String FileName = "D:\\deck";
	FileName += "\";
	switch (card.rank)
	{
		case RANK_6:		FileName += '6'; break;
		case RANK_7:		FileName += '7'; break;
		case RANK_8:		FileName += '8'; break;
		case RANK_9:		FileName += '9'; break;
		case RANK_10:		FileName += 'T'; break;
		case RANK_VALET:	FileName += 'V'; break;
		case RANK_DAMA:	    FileName += 'D'; break;
		case RANK_KOROL:	FileName += 'K'; break;
		case RANK_TYZ:		FileName += 'T'; break;
	}
		switch (card.suit)
	{
		case SUIT_TREFU:	FileName += 'TR'; break;
		case SUIT_BYBNU:	FileName += 'BY'; break;
		case SUIT_CHERVU:	FileName += 'CH'; break;
		case SUIT_PIKI:	    FileName += 'PI'; break;
	}
	FileName += ".jpg";
	return FileName;
}
//
//void printDeck(const std::array<Card, 36> &deck)
//{
//	for (const auto &card : deck)
//	{
//		printCard(card);
//		std::cout << ' ';
//	}
//
//	std::cout << '\n';
//}
//
//void swapCard(Card &a, Card &b)
//{
//	Card temp = a;
//	a = b;
//	b = temp;
//}
//
//// Генерируем случайное число между min и max (предполагается, что функция srand() уже была вызвана)
//int getRandomNumber(int min, int max)
//{
//	static const double fraction = 1.0 / (static_cast<double>(RAND_MAX) + 1.0);
// 	// Равномерно распределяем генерацию случайного числа в диапазоне значений
//	return static_cast<int>(rand() * fraction * (max - min + 1) + min);
//}
//
//void shuffleDeck(std::array<Card, 36> &deck)
//{
//	// Перебираем каждую карту в колоде
//	for (int index = 0; index < 36; ++index)
//	{
//		// Выбираем любую случайную карту
//		int swapIndex = getRandomNumber(0, 51);
//		// Меняем местами с нашей текущей картой
//		swapCard(deck[index], deck[swapIndex]);
//	}
//}
//
//int getCardValue(const Card &card)
//{
//	switch (card.rank)
//	{
//	case RANK_6:		return 6;
//	case RANK_7:		return 7;
//	case RANK_8:		return 8;
//	case RANK_9:		return 9;
//	case RANK_10:		return 10;
//	case RANK_VALET:	return 10;
//	case RANK_DAMA:	        return 10;
//	case RANK_KOROL:	return 10;
//	case RANK_TYZ:		return 11;
//	}
//
//	return 0;
//}
//
//char getPlayerChoice()
//{
//	std::cout << "(h) to hit, or (s) to stand: ";
//	char choice;
//	do
//	{
//		std::cin >> choice;
//	} while (choice != 'h' && choice != 's');
//
//	return choice;
//}
//
//bool playBlackjack(const std::array<Card, 36> &deck)
//{
//	// Настраиваем стартовый режим игры
//	const Card *cardPtr = &deck[0];
//
//	int playerTotal = 0;
//	int dealerTotal = 0;
//
//	// Дилер получает одну карту
//	dealerTotal += getCardValue(*cardPtr++);
//	std::cout << "The dealer is showing: " << dealerTotal << '\n';
//
//	// Игрок получает две карты
//	playerTotal += getCardValue(*cardPtr++);
//	playerTotal += getCardValue(*cardPtr++);
//
//	// Игрок начинает
//	while (1)
//	{
//		std::cout << "You have: " << playerTotal << '\n';
//
//		// Смотрим, не больше ли 21 очка у игрока
//		if (playerTotal > 21)
//			return false;
//
//		char choice = getPlayerChoice();
//		if (choice == 's')
//			break;
//
//		playerTotal += getCardValue(*cardPtr++);
//	}
//
//	// Если игрок не проиграл и у него не больше 21 очка, то тогда дилер получает карты до тех пор, пока у него не получится в сумме 17 очков
//	while (dealerTotal < 17)
//	{
//		dealerTotal += getCardValue(*cardPtr++);
//		std::cout << "The dealer now has: " << dealerTotal << '\n';
//	}
//
//	// Если у дилера больше 21 очка, то игрок победил
//	if (dealerTotal > 21)
//		return true;
//
//	return (playerTotal > dealerTotal);
//}
//
//int main()
//{
//	srand(static_cast<unsigned int>(time(0))); // устанавливаем значение системных часов в качестве стартового числа
//	rand(); // если используете Visual Studio, сбрасываем первое сгенерированное рандомное число
//
//	std::array<Card, 52> deck;
//
//	// Можно было бы вручную (по отдельности) инициализировать каждую карту, но мы ведь программисты! Цикл нам в помощь!
//	int card = 0;
//	for (int suit = 0; suit < MAX_SUITS; ++suit)
//	for (int rank = 0; rank < MAX_RANKS; ++rank)
//	{
//		deck[card].suit = static_cast<CardSuit>(suit);
//		deck[card].rank = static_cast<CardRank>(rank);
//		++card;
//	}
//
//	shuffleDeck(deck);
//
//	if (playBlackjack(deck))
//		std::cout << "You win!\n";
//	else
//		std::cout << "You lose!\n";
//
//	return 0;
//}
#endif
